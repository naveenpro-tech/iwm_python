don't let anyone tell you that python is
slow
it may not be as fast as those fancy
compiled languages but with these six
Secrets they won't be able to tell the
difference especially with the last one
the first secret use the building
functions it may seem tempting to write
your own code to solve problems and
let's be honest it's kind of fun however
if you really want to go fast you're
better off using the building functions
of the standard Library don't believe me
here's a comparison of my own sorting
algorithm against the built-in sorted
function
and no it's not slow because I'm bad at
writing code I think
these building functions are faster
because they're written in C which is
one of those compiled languages I
mentioned earlier if you can't beat them
you may as well join them just in secret
my second approach is to be lazy
laziness is a virtue our jobs as
developers is to enable that laziness
who wants to manually do anything when
you could just write some code to do it
for you in perhaps the same amount of
time if you're lucky
you can bring this laziness to python as
well through the use of generators by
using the yield keyword we can actually
turn functions into iterative generator
functions
through the yield keyword a generator
function returns a generator type
which can then be called using either
the next function or in a for Loop
call of the generator Returns the next
instance of yield in the function
you can imagine this as pausing and
resuming the function
using a generator when working with a
large data set prevents having to do
expensive memory allocation which can
heavily impact performance as you can
see
tip number three is to use concurrency
have you ever thought about cloning
yourself so you can get twice as much
done if so I have some good news for you
in computer science we refer to that as
concurrency
not all problems can be solved
concurrently but there are a good number
that can
the ones that really can are known as
embarrassingly parallel I'll probably do
a video on what problems are considered
embarrassingly parallel so now's a good
time to consider subscribing if you
haven't done so already
concurrency can be achieved in Python
using the multi-processing library in
this example we're making use of
multi-processing to batch process a
number of image by adding a gaussian
blur to them we're timing this both
running concurrently and in single
processing mode
as you can see running concurrently is a
fraction of the time
tip number four is to compile your code
using cython python is actually another
language that is a superset of python it
basically allows you to compile
python-like code to see
what this means is you can fit in with
your compiled friends from before and
this time they have to respect you
psython isn't a full-on replacement for
python but instead a way to optimize
certain parts of your code base to
improve the overall performance
in this example we're using it to
compile a module that calculates a
factorial for a given integer first we
just need to run our compilation command
to compile the code to C then we can run
our test file to measure the performance
yes that timing is correct we really do
get that level of improvement
my fifth secret is to use libraries and
Frameworks that are compiled
you may not know this already but I
actually just heard that compiled
languages tend to be more performant
well just like the standard Library
there are a number of other Frameworks
we can use to improve this performance
some of these Frameworks include numpy
pandas and pillow which are all
implemented using C under the hood this
allows you to harness the power of C
whilst writing code in a language that
is a bit more readable
and tip number six is to use Pi Pi
pipei is an alternative python
interpreter that can be faster than the
standard interpreter C python
what makes pie pie so fast is that it
uses a compiler method known as just in
time compilation just in time
compilation is very similar to
interpretation however the difference is
that it looks forward in your code and
compiles it before it's needed which has
a huge impact on performance it's the
same approach as what Java uses with the
jvm you can use pipei as just a drop-in
replacement for the python interpreter
as you can see on the screen again this
gives a huge performance increase
knowing when to use pie pie is a little
more Arcane however so it's probably a
good idea to Benchmark your code with
both Pi Pi and the standard python
interpreter before coming to a decision
armed with these six secrets you can now
make python as fast as those compiled
languages if you know of any secrets to
make python go faster that I didn't
cover in this video let me know in the
comments down below otherwise I hope you
enjoyed this video and I'll see you on
the next one