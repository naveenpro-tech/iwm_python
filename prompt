**AUTONOMOUS FULL-STACK FEATURE COMPLETION - FRONTEND INTEGRATION & COMPREHENSIVE E2E TESTING**

## **CRITICAL CONTEXT:**
You have successfully implemented 11 backend CRUD endpoints across Reviews, Pulses, Collections, and Favorites. The backend server is running on http://localhost:8000 and all endpoints are verified working. The frontend Next.js application is running on http://localhost:3000. A test user exists with credentials: `testuser1761326584487@example.com` / `Test123456`.

**Current State:**
- ✅ Backend: All CRUD endpoints implemented and tested
- ✅ Authentication: JWT-based auth working, user can login/signup
- ❌ Frontend: UI components do NOT yet call the new CRUD endpoints
- ❌ Testing: No E2E browser testing has been performed

**Your Task:**
Complete the frontend integration by creating/updating API client functions and UI components, then perform comprehensive Playwright browser automation testing to verify every feature works end-to-end through the actual GUI.

---

## **PHASE 2: FRONTEND API CLIENT & COMPONENT IMPLEMENTATION**

### **IMPLEMENTATION REQUIREMENTS:**

**For EVERY feature you implement:**
1. Create/update the API client function in `lib/api/` directory
2. Update the UI component to call the API function
3. Add proper error handling with try-catch blocks
4. Add loading states (disable buttons, show spinners during API calls)
5. Add toast notifications for success and error cases
6. Add confirmation dialogs for destructive actions (delete operations)
7. Conditionally show edit/delete buttons ONLY when `currentUser.id === item.userId`

---

### **2.1 Reviews CRUD - Complete Implementation**

**Step 1: Create API Client Functions**

File: `lib/api/reviews.ts`

Add these two functions (if file doesn't exist, create it with proper imports):

```typescript
export async function updateReview(
  reviewId: string, 
  data: {
    title?: string;
    content?: string;
    rating?: number;
    hasSpoilers?: boolean;
  }
): Promise<any> {
  return request(`/reviews/${reviewId}`, {
    method: 'PUT',
    body: JSON.stringify(data),
  })
}

export async function deleteReview(reviewId: string): Promise<any> {
  return request(`/reviews/${reviewId}`, {
    method: 'DELETE',
  })
}
```

**Step 2: Update Review Display Components**

Identify where reviews are displayed (likely `app/movies/[id]/reviews/page.tsx` or a review card component).

Add to each review card:
- Edit button (pencil icon) - only visible if `review.userId === currentUser.id`
- Delete button (trash icon) - only visible if `review.userId === currentUser.id`
- Edit button opens a modal/dialog with pre-filled form fields
- Delete button shows confirmation dialog: "Are you sure you want to delete this review? This action cannot be undone."

**Step 3: Implement Edit Review Modal**

Create or update a review edit modal component with:
- Pre-filled form fields (title, content, rating, spoilers checkbox)
- Save button that calls `updateReview()`
- Cancel button to close modal
- Loading state on Save button during API call
- Toast notification on success: "Review updated successfully"
- Toast notification on error: "Failed to update review: {error message}"
- Close modal and refresh review list on success

**Step 4: Implement Delete Review Functionality**

Add delete handler that:
1. Shows confirmation dialog with "Delete" and "Cancel" buttons
2. On confirm, calls `deleteReview(reviewId)`
3. Shows loading state during API call
4. Shows toast on success: "Review deleted successfully"
5. Shows toast on error: "Failed to delete review: {error message}"
6. Removes review from UI immediately on success (optimistic update or refetch)

---

### **2.2 Pulses CRUD - Complete Implementation**

**Step 1: Create API Client File**

File: `lib/api/pulses.ts` (create new file)

```typescript
import { request } from './base' // or wherever your request function is

export async function createPulse(data: {
  contentText: string;
  contentMedia?: string[];
  linkedMovieId?: string;
  hashtags?: string[];
}): Promise<any> {
  return request('/pulse', {
    method: 'POST',
    body: JSON.stringify(data),
  })
}

export async function deletePulse(pulseId: string): Promise<any> {
  return request(`/pulse/${pulseId}`, {
    method: 'DELETE',
  })
}
```

**Step 2: Create Pulse Creation Form**

Location: Add to pulse feed page or movie detail page

Component requirements:
- Textarea for pulse content
- Character counter showing "X/280 characters" (update live as user types)
- Counter turns red when over 280 characters
- Submit button disabled when:
  - Content is empty
  - Content exceeds 280 characters
  - API call is in progress
- Optional: Media upload button
- Optional: Link to movie dropdown/search
- Optional: Hashtag input
- Submit button shows loading spinner during API call
- Toast on success: "Pulse posted successfully"
- Toast on error: "Failed to post pulse: {error message}"
- Clear form and refresh feed on success

**Step 3: Add Delete Button to Pulse Cards**

Update pulse card component to show:
- Delete button (trash icon) - only visible if `pulse.userId === currentUser.id`
- Confirmation dialog: "Are you sure you want to delete this pulse?"
- Loading state during deletion
- Toast on success: "Pulse deleted successfully"
- Toast on error: "Failed to delete pulse: {error message}"
- Remove pulse from feed immediately on success

---

### **2.3 Collections CRUD - Complete Implementation**

**Step 1: Update API Client**

File: `lib/api/collections.ts` (update existing or create new)

Add these functions:

```typescript
export async function createCollection(data: {
  title: string;
  description?: string;
  isPublic: boolean;
}): Promise<any> {
  return request('/collections', {
    method: 'POST',
    body: JSON.stringify(data),
  })
}

export async function addMovieToCollection(
  collectionId: string, 
  movieId: string
): Promise<any> {
  return request(`/collections/${collectionId}/movies`, {
    method: 'POST',
    body: JSON.stringify({ movieId }),
  })
}

export async function removeMovieFromCollection(
  collectionId: string, 
  movieId: string
): Promise<any> {
  return request(`/collections/${collectionId}/movies/${movieId}`, {
    method: 'DELETE',
  })
}

export async function deleteCollection(collectionId: string): Promise<any> {
  return request(`/collections/${collectionId}`, {
    method: 'DELETE',
  })
}
```

**Step 2: Create "Create Collection" Dialog**

Location: Collections list page (likely `/app/collections/page.tsx`)

Add:
- "Create Collection" button at top of page
- Dialog/modal with form fields:
  - Title (required, 3-100 characters, show character count)
  - Description (optional, max 500 characters, show character count)
  - Public/Private toggle switch
- Create button disabled when title is invalid
- Loading state during API call
- Toast on success: "Collection created successfully"
- Toast on error: "Failed to create collection: {error message}"
- Redirect to new collection detail page on success OR refresh list

**Step 3: Implement Add Movie to Collection**

Location: Collection detail page (likely `/app/collections/[id]/page.tsx`)

Add:
- "Add Movie" button
- Dialog with movie search/select functionality:
  - Search input to find movies
  - List of search results with poster images
  - Click movie to select it
  - Add button to confirm
- Loading state during API call
- Toast on success: "Movie added to collection"
- Toast on error: "Failed to add movie: {error message}"
- Refresh collection to show new movie

**Step 4: Implement Remove Movie from Collection**

On each movie card in collection detail view:
- Add "Remove" button (X icon or trash icon)
- Confirmation dialog: "Remove this movie from the collection?"
- Loading state during API call
- Toast on success: "Movie removed from collection"
- Toast on error: "Failed to remove movie: {error message}"
- Remove movie from UI immediately on success

**Step 5: Implement Delete Collection**

On collection detail page:
- Add "Delete Collection" button (in header or settings menu)
- Only visible if `collection.userId === currentUser.id`
- Confirmation dialog: "This will permanently delete the collection and remove all movies. This action cannot be undone. Are you sure?"
- Loading state during API call
- Toast on success: "Collection deleted successfully"
- Toast on error: "Failed to delete collection: {error message}"
- Redirect to collections list page on success

---

### **2.4 Favorites CRUD - Complete Implementation**

**Step 1: Create API Client**

File: `lib/api/favorites.ts` (create new file)

```typescript
import { request } from './base'

export async function addToFavorites(data: {
  type: 'movie' | 'person' | 'scene';
  movieId?: string;
  personId?: string;
}): Promise<any> {
  return request('/favorites', {
    method: 'POST',
    body: JSON.stringify(data),
  })
}

export async function removeFromFavorites(favoriteId: string): Promise<any> {
  return request(`/favorites/${favoriteId}`, {
    method: 'DELETE',
  })
}
```

**Step 2: Update "Add to Favorites" Button**

Location: Movie detail page, person detail page, etc.

Update button to:
- Show heart icon (outline when not favorited, filled when favorited)
- Check if item is already in favorites on page load
- Toggle between add/remove on click
- Show loading spinner during API call
- Disable button during API call
- Toast on add: "Added to favorites"
- Toast on remove: "Removed from favorites"
- Toast on error: "Failed to update favorites: {error message}"
- Update button state immediately after successful API call

**Step 3: Update Favorites Tab on Profile Page**

Location: `/app/profile/[username]/page.tsx` - Favorites tab

Ensure:
- Favorites are fetched from API (not mock data)
- Each favorite item shows a remove button
- Remove button calls `removeFromFavorites()`
- Loading state during removal
- Toast notifications for success/error
- Item removed from list immediately on success

---

## **PHASE 3: COMPREHENSIVE PLAYWRIGHT E2E TESTING**

### **TESTING METHODOLOGY:**

For EACH test scenario below:
1. **Navigate** to the page using `browser_navigate_Playwright`
2. **Authenticate** if needed (login with test user)
3. **Interact** with UI elements using `browser_click_Playwright`, `browser_type_Playwright`, etc.
4. **Verify** visual feedback (check for toast notifications in page snapshot)
5. **Check console** for errors using `browser_console_messages_Playwright`
6. **Verify persistence** by refreshing page and checking if changes persisted
7. **Document results** - note what worked and what failed

---

### **TEST 3.1: Review CRUD Flow**

**Test Name:** Complete Review Lifecycle (Create → Edit → Delete)

**Prerequisites:**
- User must be logged in as `testuser1761326584487@example.com`
- Navigate to a movie detail page (e.g., `/movies/telugu-movie-1`)

**Test Steps:**

1. **CREATE REVIEW:**
   - Scroll to reviews section
   - Click "Write a Review" button
   - Fill form:
     - Rating: 9/10
     - Title: "Excellent Telugu Cinema"
     - Content: "This is a comprehensive test review with detailed analysis of the movie's cinematography, acting, and storytelling. The director has done an exceptional job."
     - Spoilers: unchecked
   - Click "Submit Review" button
   - **Verify:** Toast appears with "Review submitted successfully"
   - **Verify:** Review appears in the list with correct data
   - **Verify:** Edit and Delete buttons are visible (user owns this review)
   - **Verify:** No console errors

2. **EDIT REVIEW:**
   - Click "Edit" button on the newly created review
   - **Verify:** Modal/dialog opens with pre-filled data
   - Update fields:
     - Rating: 10/10
     - Title: "Masterpiece of Telugu Cinema"
   - Click "Save" button
   - **Verify:** Toast appears with "Review updated successfully"
   - **Verify:** Modal closes
   - **Verify:** Review shows updated rating and title
   - **Verify:** No console errors

3. **DELETE REVIEW:**
   - Click "Delete" button on the review
   - **Verify:** Confirmation dialog appears
   - Click "Confirm" or "Delete" button
   - **Verify:** Toast appears with "Review deleted successfully"
   - **Verify:** Review is removed from the list
   - **Verify:** No console errors

4. **PERSISTENCE CHECK:**
   - Refresh the page
   - **Verify:** Deleted review does NOT reappear
   - **Verify:** No console errors on page load

**Expected Result:** All steps complete successfully with no errors

---

### **TEST 3.2: Pulse CRUD Flow**

**Test Name:** Create and Delete Pulse

**Prerequisites:**
- User must be logged in
- Navigate to pulse feed page or movie detail page with pulse creation

**Test Steps:**

1. **CREATE PULSE:**
   - Locate pulse creation form/textarea
   - Type: "Just watched an amazing Telugu movie! The cinematography was breathtaking. #TeluguCinema #MovieReview #Testing"
   - **Verify:** Character counter shows "123/280" (or similar)
   - **Verify:** Submit button is enabled
   - Click "Post" or "Submit" button
   - **Verify:** Toast appears with "Pulse posted successfully"
   - **Verify:** Pulse appears in feed with correct content
   - **Verify:** Delete button is visible (user owns this pulse)
   - **Verify:** No console errors

2. **TEST CHARACTER LIMIT:**
   - Type a very long message (over 280 characters)
   - **Verify:** Character counter turns red or shows warning
   - **Verify:** Submit button is disabled
   - Delete some text to get under 280 characters
   - **Verify:** Submit button becomes enabled

3. **DELETE PULSE:**
   - Find the pulse you just created in the feed
   - Click "Delete" button
   - **Verify:** Confirmation dialog appears
   - Click "Confirm" or "Delete"
   - **Verify:** Toast appears with "Pulse deleted successfully"
   - **Verify:** Pulse is removed from feed
   - **Verify:** No console errors

4. **PERSISTENCE CHECK:**
   - Refresh the page
   - **Verify:** Deleted pulse does NOT reappear
   - **Verify:** No console errors

**Expected Result:** All steps complete successfully with no errors

---

### **TEST 3.3: Collection CRUD Flow**

**Test Name:** Complete Collection Lifecycle (Create → Add Movies → Remove Movie → Delete Collection)

**Prerequisites:**
- User must be logged in
- Navigate to collections page (`/collections`)

**Test Steps:**

1. **CREATE COLLECTION:**
   - Click "Create Collection" button
   - **Verify:** Dialog/modal opens
   - Fill form:
     - Title: "My Favorite Telugu Classics"
     - Description: "A curated collection of timeless Telugu films that showcase the best of regional cinema"
     - Public: checked/enabled
   - Click "Create" button
   - **Verify:** Toast appears with "Collection created successfully"
   - **Verify:** Collection appears in list OR redirected to collection detail page
   - **Verify:** No console errors

2. **ADD FIRST MOVIE:**
   - On collection detail page, click "Add Movie" button
   - **Verify:** Movie search dialog opens
   - Search for a movie (type movie title in search)
   - Click on a movie from search results
   - Click "Add" button
   - **Verify:** Toast appears with "Movie added to collection"
   - **Verify:** Movie appears in collection with poster image
   - **Verify:** No console errors

3. **ADD SECOND MOVIE:**
   - Click "Add Movie" button again
   - Search for a different movie
   - Select and add it
   - **Verify:** Toast appears
   - **Verify:** Second movie appears in collection
   - **Verify:** Collection now shows 2 movies

4. **REMOVE MOVIE:**
   - On one of the movie cards, click "Remove" button (X icon or trash icon)
   - **Verify:** Confirmation dialog appears
   - Click "Confirm" or "Remove"
   - **Verify:** Toast appears with "Movie removed from collection"
   - **Verify:** Movie is removed from collection
   - **Verify:** Collection now shows 1 movie
   - **Verify:** No console errors

5. **DELETE COLLECTION:**
   - Click "Delete Collection" button
   - **Verify:** Confirmation dialog appears with warning message
   - Click "Confirm" or "Delete"
   - **Verify:** Toast appears with "Collection deleted successfully"
   - **Verify:** Redirected to collections list page
   - **Verify:** Deleted collection does NOT appear in list
   - **Verify:** No console errors

6. **PERSISTENCE CHECK:**
   - Refresh the collections list page
   - **Verify:** Deleted collection does NOT reappear
   - **Verify:** No console errors

**Expected Result:** All steps complete successfully with no errors

---

### **TEST 3.4: Favorites Toggle Flow**

**Test Name:** Add and Remove Favorites

**Prerequisites:**
- User must be logged in
- Navigate to a movie detail page

**Test Steps:**

1. **ADD TO FAVORITES:**
   - Locate "Add to Favorites" button (heart icon)
   - **Verify:** Heart icon is outline (not filled)
   - Click the button
   - **Verify:** Button shows loading state (spinner or disabled)
   - **Verify:** Toast appears with "Added to favorites"
   - **Verify:** Heart icon changes to filled
   - **Verify:** No console errors

2. **VERIFY IN PROFILE:**
   - Navigate to user profile page (`/profile/testuser1761326584487`)
   - Click "Favorites" tab
   - **Verify:** Movie appears in favorites list
   - **Verify:** No console errors

3. **REMOVE FROM FAVORITES (via profile):**
   - On the favorite item, click "Remove" button
   - **Verify:** Confirmation dialog appears (optional)
   - Confirm removal
   - **Verify:** Toast appears with "Removed from favorites"
   - **Verify:** Movie is removed from favorites list
   - **Verify:** No console errors

4. **VERIFY ON MOVIE PAGE:**
   - Navigate back to the movie detail page
   - **Verify:** Heart icon is outline again (not filled)
   - **Verify:** No console errors

5. **TOGGLE TEST:**
   - Click heart icon to add to favorites
   - **Verify:** Toast and icon change
   - Click heart icon again to remove
   - **Verify:** Toast and icon change back
   - **Verify:** No console errors

**Expected Result:** All steps complete successfully with no errors

---

### **TEST 3.5: User Profile Page**

**Test Name:** Profile Page Loads Correctly with Real Data

**Prerequisites:**
- User must be logged in as `testuser1761326584487@example.com`

**Test Steps:**

1. **NAVIGATE TO PROFILE:**
   - Navigate to `/profile/testuser1761326584487`
   - **Verify:** Page loads without 404 error
   - **Verify:** User name "Test User New" is displayed
   - **Verify:** User stats are displayed (reviews count, watchlist count, etc.)
   - **Verify:** No console errors

2. **CHECK ALL TABS:**
   - Click "Overview" tab - **Verify:** Content loads
   - Click "Watchlist" tab - **Verify:** Content loads
   - Click "Favorites" tab - **Verify:** Content loads
   - Click "Collections" tab - **Verify:** Content loads
   - Click "Reviews" tab - **Verify:** Content loads
   - **Verify:** No console errors on any tab

3. **VERIFY REAL DATA:**
   - Check that data is fetched from API (not hardcoded/mock data)
   - **Verify:** Network requests visible in browser console
   - **Verify:** Data matches what was created in previous tests

**Expected Result:** Profile page loads correctly with all tabs functional

---

## **PHASE 4: BUG FIXING & ITERATION**

**For EVERY bug discovered during testing:**

1. **Document the bug:**
   - What happened vs. what was expected
   - Exact steps to reproduce
   - Error messages from console
   - Screenshot or page snapshot

2. **Identify root cause:**
   - Frontend issue (component, API call, state management)
   - Backend issue (endpoint, validation, database)
   - Integration issue (data format mismatch, CORS, authentication)

3. **Implement the fix:**
   - Make necessary code changes
   - Test the fix in isolation
   - Verify no regressions

4. **Re-run the test:**
   - Execute the same test scenario again
   - Verify the bug is fixed
   - Verify no new bugs introduced

5. **Continue to next test:**
   - Only move forward when current test passes completely

---

## **FINAL DELIVERABLES:**

Generate a comprehensive markdown report with:

1. **Executive Summary:**
   - Total features implemented
   - Total tests executed
   - Pass/fail rate
   - Overall status

2. **Implementation Details:**
   - List of all files created/modified
   - API functions added
   - UI components updated

3. **Test Results:**
   - For each test scenario:
     - Test name
     - Status (✅ PASS or ❌ FAIL)
     - Steps executed
     - Screenshots or evidence
     - Any bugs found and fixed

4. **Bug Report:**
   - List of all bugs discovered
   - Root cause analysis
   - Fixes implemented
   - Verification status

5. **Console Errors:**
   - Any errors that appeared during testing
   - Whether they were fixed or are known issues

6. **Next Steps:**
   - Any remaining work
   - Recommendations for improvements

---

## **SUCCESS CRITERIA (ALL MUST BE TRUE):**

- ✅ All API client functions created in `lib/api/` directory
- ✅ All UI components updated with edit/delete buttons
- ✅ All buttons conditionally shown based on ownership
- ✅ All confirmation dialogs implemented for destructive actions
- ✅ All loading states implemented (buttons disabled during API calls)
- ✅ All toast notifications implemented (success and error cases)
- ✅ All 5 Playwright test scenarios executed
- ✅ All tests PASS with no errors
- ✅ No console errors during any test
- ✅ All data persists correctly (verified by page refresh)
- ✅ Comprehensive test report generated

---

## **EXECUTION INSTRUCTIONS:**

**BEGIN AUTONOMOUS EXECUTION NOW.**

1. Start with Phase 2: Implement ALL frontend API clients and UI components
2. Move to Phase 3: Execute ALL Playwright E2E tests in order
3. Fix any bugs discovered during testing (Phase 4)
4. Re-test until all tests pass
5. Generate comprehensive test report

**DO NOT RESPOND until:**
- All frontend components are implemented
- All Playwright tests are executed
- All bugs are fixed
- All tests pass
- Comprehensive test report is ready

**WORK AUTONOMOUSLY. DO NOT ASK FOR PERMISSION. FIX BUGS AS YOU DISCOVER THEM. TEST EVERYTHING VIA BROWSER GUI.****SUCCESS CRITERIA (ALL MUST BE TRUE):**

- ✅ All API client functions created in `lib/api/` directory
- ✅ All UI components updated with edit/delete buttons
- ✅ All buttons conditionally shown based on ownership
- ✅ All confirmation dialogs implemented for destructive actions
- ✅ All loading states implemented (buttons disabled during API calls)
- ✅ All toast notifications implemented (success and error cases)
- ✅ All 5 Playwright test scenarios executed
- ✅ All tests PASS with no errors
- ✅ No console errors during any test
- ✅ All data persists correctly (verified by page refresh)
- ✅ Comprehensive test report generated

---

## **EXECUTION INSTRUCTIONS:**

**BEGIN AUTONOMOUS EXECUTION NOW.**

1. Start with Phase 2: Implement ALL frontend API clients and UI components
2. Move to Phase 3: Execute ALL Playwright E2E tests in order
3. Fix any bugs discovered during testing (Phase 4)
4. Re-test until all tests pass
5. Generate comprehensive test report

**DO NOT RESPOND until:**
- All frontend components are implemented
- All Playwright tests are executed
- All bugs are fixed
- All tests pass
- Comprehensive test report is ready

**WORK AUTONOMOUSLY. DO NOT ASK FOR PERMISSION. FIX BUGS AS YOU DISCOVER THEM. TEST EVERYTHING VIA BROWSER GUI.****SUCCESS CRITERIA (ALL MUST BE TRUE):**

- ✅ All API client functions created in `lib/api/` directory
- ✅ All UI components updated with edit/delete buttons
- ✅ All buttons conditionally shown based on ownership
- ✅ All confirmation dialogs implemented for destructive actions
- ✅ All loading states implemented (buttons disabled during API calls)
- ✅ All toast notifications implemented (success and error cases)
- ✅ All 5 Playwright test scenarios executed
- ✅ All tests PASS with no errors
- ✅ No console errors during any test
- ✅ All data persists correctly (verified by page refresh)
- ✅ Comprehensive test report generated

---

## **EXECUTION INSTRUCTIONS:**

**BEGIN AUTONOMOUS EXECUTION NOW.**

1. Start with Phase 2: Implement ALL frontend API clients and UI components
2. Move to Phase 3: Execute ALL Playwright E2E tests in order
3. Fix any bugs discovered during testing (Phase 4)
4. Re-test until all tests pass
5. Generate comprehensive test report

**DO NOT RESPOND until:**
- All frontend components are implemented
- All Playwright tests are executed
- All bugs are fixed
- All tests pass
- Comprehensive test report is ready

**WORK AUTONOMOUSLY. DO NOT ASK FOR PERMISSION. FIX BUGS AS YOU DISCOVER THEM. TEST EVERYTHING VIA BROWSER GUI.**hjjkjjbk